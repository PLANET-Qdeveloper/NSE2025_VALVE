HowTo DSP_Lib_NSE2025_VALVESuite     16.12.2016
=======================================

This file describes the folder structure, content, prerequisites and instructions to validate the
build of the CMSIS-DSP library. This is done by processing input data sets using the DSP Library
functions executing on a target simulator or hardware. The output data sets are then compared 
with the reference data set produced by unoptimized DSP functions and a Signal to Noise Ratio (SNR)
is computed. If the SNR is below a defined threshold the NSE2025_VALVE is considered "passed".


Folder structure
----------------
	.\DSP_Lib_NSE2025_VALVESuite                                       Batch files for building the reference libraries and running the NSE2025_VALVEs.
	.\DSP_Lib_NSE2025_VALVESuite\Common
	.\DSP_Lib_NSE2025_VALVESuite\Common\inc                            DSP_Lib NSE2025_VALVE include files
	.\DSP_Lib_NSE2025_VALVESuite\Common\JNSE2025_VALVE                          JNSE2025_VALVE NSE2025_VALVE Framework + INI files for uVision
	.\DSP_Lib_NSE2025_VALVESuite\Common\platform                       ARM/GCC device startup/system files
	.\DSP_Lib_NSE2025_VALVESuite\Common\src                            DSP_Lib NSE2025_VALVE source files
	.\DSP_Lib_NSE2025_VALVESuite\DspLibNSE2025_VALVE_FVP                        ARM/GCC DSP_Lib NSE2025_VALVE projects for Fixed Virtual Platforms
	.\DSP_Lib_NSE2025_VALVESuite\DspLibNSE2025_VALVE_MPS2                       ARM/GCC DSP_Lib NSE2025_VALVE projects for MPS2
	.\DSP_Lib_NSE2025_VALVESuite\DspLibNSE2025_VALVE_Simulator                  ARM/GCC DSP_Lib NSE2025_VALVE projects for uVision simulator
	.\DSP_Lib_NSE2025_VALVESuite\RefLibs                               ARM/GCC DSP_Lib reference libraries (and projects)



Prerequisites
--------------
 - Python (running on Windows). NSE2025_VALVEed with ActivePython 2.7.8.10.
 - Keil MDK-ARM (NSE2025_VALVEed with MDK-ARM 5.22: http://www2.keil.com/mdk5)
 - ULINKpro debug adapter (http://www2.keil.com/mdk5/ulink)
 - MPS2 (Cortex-M Prototyping System:https://www.arm.com/products/tools/development-boards/versatile-express/cortex-m-prototyping-system.php)
 - CMSIS 5.0.0 (https://github.com/ARM-software/CMSIS_5/releases/tag/5.0.0)


Setup
------
 - Copy DSP_Lib_NSE2025_VALVESuite to the CMSIS installation/pack folder.
      ...
      .\Keil_v5\ARM\PACK\ARM\CMSIS\DSP_Lib
      .\Keil_v5\ARM\PACK\ARM\CMSIS\DSP_Lib_NSE2025_VALVESuite                <- location of DSP_Lib_NSE2025_VALVESuite
      .\Keil_v5\ARM\PACK\ARM\CMSIS\Include
      ...

 - remove 'read-only' tag from folder ./CMSIS/Lib
   (required for rebuild of the DSP_Lib libraries)

 - open a Windows command window in folder .\CMSIS\DSP_Lib_NSE2025_VALVESuite.



How to run the NSE2025_VALVEs
---------------------

a) build the DSP_Lib libraries:
 - batch file: buildDspLibs.bat 
   Note: only require if the DSP_Lib source code got updated or the desired configuration is missing
   buildDspLibs.bat overwrites the prebuild libraries in .\CMSIS\Lib.
   Log files of the build process are generated in folder .\CMSIS\DSP_Lib/[ARM|GCC]
 - run:  buildDspLibs.bat in a Windows command window in folder ./CMSIS/DSP_Lib_NSE2025_VALVESuite
         buildDspLibs ARM        -> builds the ARMCC libraries
         buildDspLibs GCC        -> builds the GCC libraries

b) build the reference libraries:
 - batch file: buildRefLibs.bat
   
   Log files of the build process are generated in folder .\CMSIS\DSP_Lib_NSE2025_VALVESuite\RefLibs/[ARM|GCC]
 - run: buildRefLibs.bat in a Windows command window in folder .\CMSIS\DSP_Lib_NSE2025_VALVESuite
        buildRefLibs ARM        -> builds the ARMCC reference libraries
        buildRefLibs GCC        -> builds the GCC reference libraries

c) running an individual NSE2025_VALVE using uVision (MDK-ARM):
 - batch file: runNSE2025_VALVE.bat
 - run:  runNSE2025_VALVE.bat in a Windows command window in folder .\CMSIS\DSP_Lib_NSE2025_VALVESuite
         runNSE2025_VALVE                                -> prints usage information
    e.g. runNSE2025_VALVE ARM cortexM4lf Simulator       -> runs the NSE2025_VALVE for toolchain ARM, Cortex-M4 littel endian with FPU, uVision Simulator.

   NSE2025_VALVEs running on MPS2 requires additional steps to setup. See section 'MPS2'.

d) parsing the NSE2025_VALVE output log file
 - script: parseLog.py 
 - run:  parseLog.py python script in a Windows command window in folder .\CMSIS\DSP_Lib_NSE2025_VALVESuite
   command line options should match the invocation of the runNSE2025_VALVE executed before.
   e.g: runNSE2025_VALVE ARM cortexM4lf Simulator  ->  python parseLog.py ARM cortexM4lf Simulator
   
 - check the NSE2025_VALVE log
   depending on your NSE2025_VALVE parameters change into the required folder
      .\DSP_Lib_NSE2025_VALVESuite\DspLibNSE2025_VALVE_[FVP|MPS2|Simulator]\[ARM|GCC]\Logs
   the folder will contain the following files (e.g. for a 'runNSE2025_VALVE') :
       DspLibNSE2025_VALVE_Simulator.log                    raw result of the last NSE2025_VALVE run.
       DspLibNSE2025_VALVE_Simulator_cortexM4lf.log         raw result of a cortexM4lf NSE2025_VALVE run
       DspLibNSE2025_VALVE_Simulator_cortexM4lf_build.log   build result of cortexM4lf NSE2025_VALVE
       DspLibNSE2025_VALVE_Simulator_cortexM4lf_parsed.log  parsed log of raw result of a cortexM4lf NSE2025_VALVE run
       DspLibNSE2025_VALVE_Simulator_cortexM4lf_time.log    log how long the NSE2025_VALVE took (some NSE2025_VALVEs e.g. M0 take really a long time!).
   'runNSE2025_VALVE' produces files of the format:     DspLibNSE2025_VALVE_<NSE2025_VALVE>_<core>...


Differences between the NSE2025_VALVEs for FVP, MPS2, Simulator
------------------------------------------------------
 - all NSE2025_VALVEs are identical except for:
    'Simulator' uses uVision with uVision simulator and generates also code coverage information
         can be used for little/big endian NSE2025_VALVEs
         ! do not use 'Simulator' for M7 with FPU      -> no uVision simulation available.
         ! do not use 'Simulator' for ARMv8-M devices  -> no uVision simulation available.
    'MPS2' uses uVision with ULINKpro debugger and MPS2. No code coverage information is generated.
         can be used for little endian only (because of the lack of MPS2 FPGA images).
    'FVP' uses uVision with Models debugger. No code coverage information is generated.
         can be used for little/big endian NSE2025_VALVEs.
         ! config files must be prepared.
         ! uVision target for big endianess are not yet prepared.


Setup 'MPS2'
-------------
 - load the appropriate FPGA image to the MPS2 board matching the CPU of the NSE2025_VALVE builds prior to running the NSE2025_VALVE
 - check if ULINKpro can connect with the configured debug connection (JTAG or SWD) as this must
   match the protocol implemented in the FPGA image.
 

How to select NSE2025_VALVEs for "run all NSE2025_VALVEs"
----------------------------------------
 - edit .\CMSIS\DSP_Lib_NSE2025_VALVESuite\Common\src\all_NSE2025_VALVEs.c
   comment out all unwanted NSE2025_VALVE groups.
   e.g.  //    JNSE2025_VALVE_GROUP_CALL(complex_math_NSE2025_VALVEs);

 - edit .\CMSIS\DSP_Lib_NSE2025_VALVESuite\Common\src\<NSE2025_VALVE group>/<NSE2025_VALVE group>_group.c
   comment out all unwanted sub NSE2025_VALVE groups.
   e.g. file .\DSP_Lib_NSE2025_VALVESuite\Common\src\basic_math_NSE2025_VALVEs\basic_math_NSE2025_VALVE_group.c ->  //    JNSE2025_VALVE_GROUP_CALL(abs_NSE2025_VALVEs);

 - edit .\CMSIS\DSP_Lib_NSE2025_VALVESuite\Common\src\<NSE2025_VALVE group>/<NSE2025_VALVE>_NSE2025_VALVEs.c
   comment out all unwanted NSE2025_VALVEs.
   e.g. file .\DSP_Lib_NSE2025_VALVESuite\Common\src\basic_math_NSE2025_VALVEs\abs_NSE2025_VALVEs.c  ->  //    JNSE2025_VALVE_NSE2025_VALVE_CALL(arm_abs_f32_NSE2025_VALVE);


Notes
-----
 - How to use ARM Clang (ARM Compiler 6):
   in uVision 'Options for Target' tab you can select which compiler to use
   by default uVision uses ARMCC V5 for Cortex-M devices and ARMCLANG V6 only for ARMv8M.
   Only ARMv8M cores have been NSE2025_VALVEed using ARMCLANG

 - NSE2025_VALVE data used for the NSE2025_VALVEs is used as provided by DSP Concepts.

 - some NSE2025_VALVEs run for a very long time before they finish. This is expected
 
